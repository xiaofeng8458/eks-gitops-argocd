# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  AWS_REGION : "us-west-2" 
# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: write    # This is required for actions/checkout
jobs:
  build:
    name: Building and Pushing the Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: arn:aws:iam::128194085353:role/githubActionsRole2
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}
    # Hello from AWS: WhoAmI
    - name: Sts GetCallerIdentity
      run: |
        aws sts get-caller-identity

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: eks-gitops-argocd

      run: |
        # Build a docker container and push it to ECR
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash docker/.
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"
        
    - name: Update Version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: eks-gitops-argocd
      run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          version=$(cat ./charts/eks-gitops-argocd/values.yaml | grep version: | awk '{print $2}')
          sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./charts/eks-gitops-argocd/values.yaml
          OLD_REPO=`grep 1234567890 ./charts/eks-gitops-argocd/values.yaml | cut -d ':' -f2`
          NEW_REPO="${ECR_REGISTRY}/${ECR_REPOSITORY}"
          sed -i "s|$OLD_REPO| $NEW_REPO|" ./charts/eks-gitops-argocd/values.yaml
    
    - name: Login to Jira
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    - name: Comment on issue
      uses: atlassian/gajira-comment@v3
      with:
        issue: DEMO-4
        comment: "testing eks-gitops-argocd"
      
    # Update chart version, package, and push
    - name : Update helm chart version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: eks-gitops-argocd
      run: |
          VER=`grep version: charts/eks-gitops-argocd/Chart.yaml | cut -d ':' -f2`
          # MAJOR=`echo $VER | cut -d '.' -f1`
          # MINOR=`echo $VER | cut -d '.' -f2`
          # SUBVER=`echo $VER | cut -d '.' -f3`
          # SUBVER="$((${SUBVER//[ $'\001'-$'\037']}+1))"
          # NEW_VER=`echo $MAJOR.$MINOR.$SUBVER`
          # sed -i "s/$VER/ $NEW_VER/" charts/eks-gitops-argocd/Chart.yaml
          helm package charts/eks-gitops-argocd
          #helm push $ECR_REPOSITORY-$NEW_VER.tgz oci://$ECR_REGISTRY/
          helm push eks-gitops-argocd-0.1.1.tgz oci://$ECR_REGISTRY/



    # - name: Commit and push changes
    #   uses: devops-infra/action-commit-push@v0.3
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     commit_message: Version updated
